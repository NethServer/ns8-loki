#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import subprocess
import hashlib
import agent
import json
import uuid
import sys

request = json.load(sys.stdin)

rdb = agent.redis_connect()
cluster_uuid = rdb.get('cluster/uuid')
subscription = rdb.hgetall('cluster/subscription')

if not bool(subscription):
    print("No subscription found !")
    sys.exit(1)

if (request['active']):
    agent.set_env('CLOUD_LOG_MANAGER_UUID', uuid.uuid5(uuid.NAMESPACE_DNS, cluster_uuid))
    agent.set_env('CLOUD_LOG_MANAGER_HOSTNAME', 'cluster-' + hashlib.sha256(cluster_uuid.encode("utf-8")).hexdigest()[:8])
    agent.set_env('CLOUD_LOG_MANAGER_ADDRESS', f"{request['address']}")
    agent.set_env('CLOUD_LOG_MANAGER_TENANT', f"{request['tenant']}")

    if 'start_time' in request and request['start_time'] != '':
        agent.set_env('CLOUD_LOG_MANAGER_START_TIME', f"{request['start_time']}")

    # If process is running, restart with new env variables, otherwise enable it
    response = subprocess.run(['systemctl', '--user', 'is-active', 'cloud-log-manager-forwarder'], capture_output=True, text=True)
    if response.stdout.strip() in ['active', 'failed']:
        action = 'restart'
    else:
        action = 'enable'
else:
    agent.unset_env('CLOUD_LOG_MANAGER_UUID')
    agent.unset_env('CLOUD_LOG_MANAGER_START_TIME')
    agent.unset_env('CLOUD_LOG_MANAGER_ADDRESS')
    agent.unset_env('CLOUD_LOG_MANAGER_TENANT')

    action = 'disable'

subprocess.run(["systemctl", "--user", action, "--now", "cloud-log-manager-forwarder.service"], 
                stdout=sys.stderr,
                stderr=sys.stderr,
                text=True,
                check=True)
